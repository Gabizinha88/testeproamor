# app.py (VERS√ÉO CORRIGIDA - sem erro de coluna)
import streamlit as st
import pandas as pd
import plotly.express as px
from sqlalchemy import create_engine
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise PNAES - Todas as Regi√µes", layout="wide")

# FUN√á√ÉO DE CONEX√ÉO
@st.cache_resource
def init_connection():
    try:
        connection_string = "postgresql://data_iesb:iesb@bigdata.dataiesb.com:5432/iesb"
        engine = create_engine(connection_string)
        with engine.connect() as conn:
            st.success("‚úÖ Conex√£o estabelecida com sucesso!")
        return engine
    except Exception as e:
        st.error(f"‚ùå Erro na conex√£o: {str(e)}")
        return None

# FUN√á√ïES PARA CARREGAR DADOS - VERS√ÉO CORRIGIDA
@st.cache_data
def load_ambulatory_data(_engine):
    query = """
    SELECT 
        municipio_codigo_com_dv as codigo_municipio,
        municipio_nome as nome_municipio,
        regiao_nome,
        uf_sigla,
        ano_producao_ambulatorial,
        qtd_total,
        vl_total,
        qtd_total_subgrupos
    FROM sus_procedimento_ambulatorial 
    WHERE ano_producao_ambulatorial >= '2020'
    """
    return pd.read_sql(query, _engine)

@st.cache_data
def load_population_data(_engine):
    query = """
    SELECT 
        "ANO",
        "CO_MUNICIPIO",
        "IDADE", 
        "SEXO",
        "TOTAL" as populacao
    FROM "Censo_20222_Populacao_Idade_Sexo" 
    LIMIT 100000
    """
    return pd.read_sql(query, _engine)

@st.cache_data
def load_economic_data(_engine):
    query = """
    SELECT 
        codigo_municipio_dv,
        ano_pib,
        vl_pib,
        vl_pib_per_capta,
        vl_servicos
    FROM pib_municipios 
    WHERE ano_pib >= '2020'
    LIMIT 50000
    """
    return pd.read_sql(query, _engine)

@st.cache_data
def load_municipio_data(_engine):
    # CONSULTA CORRIGIDA - apenas colunas que existem
    query = """
    SELECT 
        codigo_municipio_dv as codigo_municipio,
        nome_municipio,
        municipio_capital,
        latitude,
        longitude
        -- Removidas uf_sigla e regiao_nome que n√£o existem na tabela
    FROM municipio 
    LIMIT 5000
    """
    return pd.read_sql(query, _engine)

# FUN√á√ÉO PARA EXPLORAR ESTRUTURA DAS TABELAS
@st.cache_data
def explore_database_structure(_engine):
    """Fun√ß√£o para explorar quais colunas existem nas tabelas"""
    tables = ['municipio', 'sus_procedimento_ambulatorial', 'pib_municipios', 'Censo_20222_Populacao_Idade_Sexo']
    
    structure_info = {}
    
    for table in tables:
        try:
            # Pega algumas linhas para ver a estrutura
            sample_query = f"SELECT * FROM {table} LIMIT 1"
            sample_df = pd.read_sql(sample_query, _engine)
            structure_info[table] = {
                'columns': list(sample_df.columns),
                'sample_data': sample_df.iloc[0] if not sample_df.empty else None
            }
        except Exception as e:
            structure_info[table] = {'error': str(e)}
    
    return structure_info

def main():
    st.title("üè• An√°lise PNAES - Sistema de Sa√∫de Brasileiro")
    
    # Inicializar conex√£o
    if 'engine' not in st.session_state:
        with st.spinner("Conectando ao banco de dados..."):
            st.session_state.engine = init_connection()
    
    if st.session_state.engine:
        # Bot√£o para explorar estrutura do banco (debug)
        with st.expander("üîç Explorar Estrutura do Banco (Debug)"):
            if st.button("Ver estrutura das tabelas"):
                structure = explore_database_structure(st.session_state.engine)
                for table, info in structure.items():
                    st.write(f"**Tabela: {table}**")
                    if 'columns' in info:
                        st.write(f"Colunas: {info['columns']}")
                    if 'error' in info:
                        st.error(f"Erro: {info['error']}")
                    st.write("---")
        
        # Carregar dados
        with st.spinner("Carregando dados do sistema de sa√∫de..."):
            df_ambulatorial = load_ambulatory_data(st.session_state.engine)
        
        with st.spinner("Carregando dados populacionais..."):
            df_populacao = load_population_data(st.session_state.engine)
        
        with st.spinner("Carregando dados de munic√≠pios..."):
            df_municipio = load_municipio_data(st.session_state.engine)
        
        with st.spinner("Carregando dados econ√¥micos..."):
            df_economico = load_economic_data(st.session_state.engine)
        
        # Mostrar diagn√≥stico inicial
        st.header("üìä Diagn√≥stico dos Dados Carregados")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Dados Ambulatoriais", f"{len(df_ambulatorial):,}")
            if not df_ambulatorial.empty:
                st.caption(f"Regi√µes: {df_ambulatorial['regiao_nome'].nunique()}")
        
        with col2:
            st.metric("Dados Populacionais", f"{len(df_populacao):,}")
        
        with col3:
            st.metric("Munic√≠pios", f"{len(df_municipio):,}")
        
        with col4:
            st.metric("Dados Econ√¥micos", f"{len(df_economico):,}")
        
        # An√°lise por Regi√£o (usando dados ambulatoriais que t√™m regi√£o)
        if not df_ambulatorial.empty:
            st.header("üè• An√°lise por Regi√£o")
            
            # Verificar distribui√ß√£o regional
            distribuicao_regioes = df_ambulatorial['regiao_nome'].value_counts()
            
            st.subheader("üìà Distribui√ß√£o dos Dados por Regi√£o")
            col1, col2 = st.columns([2, 1])
            
            with col1:
                fig_dist = px.bar(
                    x=distribuicao_regioes.index,
                    y=distribuicao_regioes.values,
                    title="Quantidade de Registros por Regi√£o",
                    labels={'x': 'Regi√£o', 'y': 'N√∫mero de Registros'},
                    color=distribuicao_regioes.index
                )
                st.plotly_chart(fig_dist, use_container_width=True)
            
            with col2:
                st.write("**Resumo por Regi√£o:**")
                for regiao, count in distribuicao_regioes.items():
                    st.write(f"- {regiao}: {count:,} registros")
            
            # An√°lise de investimento por regi√£o
            st.subheader("üí∞ Investimento em Sa√∫de por Regi√£o")
            
            investimento_regiao = df_ambulatorial.groupby('regiao_nome').agg({
                'vl_total': 'sum',
                'qtd_total': 'sum',
                'codigo_municipio': 'nunique'
            }).reset_index()
            
            investimento_regiao = investimento_regiao.rename(columns={
                'codigo_municipio': 'municipios',
                'vl_total': 'investimento_total',
                'qtd_total': 'procedimentos_total'
            })
            
            col1, col2 = st.columns(2)
            
            with col1:
                fig_invest = px.bar(
                    investimento_regiao,
                    x='regiao_nome',
                    y='investimento_total',
                    title='Investimento Total por Regi√£o (R$)',
                    color='regiao_nome',
                    labels={'investimento_total': 'Investimento (R$)', 'regiao_nome': 'Regi√£o'}
                )
                st.plotly_chart(fig_invest, use_container_width=True)
            
            with col2:
                fig_proc = px.bar(
                    investimento_regiao,
                    x='regiao_nome',
                    y='procedimentos_total',
                    title='Procedimentos Totais por Regi√£o',
                    color='regiao_nome',
                    labels={'procedimentos_total': 'Procedimentos', 'regiao_nome': 'Regi√£o'}
                )
                st.plotly_chart(fig_proc, use_container_width=True)
            
            # Tabela detalhada
            st.subheader("üìã Detalhes por Regi√£o")
            investimento_regiao['investimento_total'] = investimento_regiao['investimento_total'].round(2)
            investimento_regiao['investimento_por_municipio'] = (investimento_regiao['investimento_total'] / investimento_regiao['municipios']).round(2)
            investimento_regiao['procedimentos_por_municipio'] = (investimento_regiao['procedimentos_total'] / investimento_regiao['municipios']).round(2)
            
            st.dataframe(investimento_regiao, use_container_width=True)
            
            # An√°lise por Estado
            st.header("üìä An√°lise por Estado")
            
            if 'uf_sigla' in df_ambulatorial.columns:
                dados_uf = df_ambulatorial.groupby('uf_sigla').agg({
                    'vl_total': 'sum',
                    'qtd_total': 'sum',
                    'codigo_municipio': 'nunique'
                }).reset_index()
                
                dados_uf = dados_uf.rename(columns={
                    'codigo_municipio': 'municipios',
                    'vl_total': 'investimento_total',
                    'qtd_total': 'procedimentos_total'
                })
                
                # Top 10 estados por investimento
                top_estados = dados_uf.nlargest(10, 'investimento_total')
                
                fig_top_estados = px.bar(
                    top_estados,
                    x='uf_sigla',
                    y='investimento_total',
                    title='Top 10 Estados - Investimento em Sa√∫de',
                    color='uf_sigla',
                    labels={'investimento_total': 'Investimento (R$)', 'uf_sigla': 'Estado'}
                )
                st.plotly_chart(fig_top_estados, use_container_width=True)
                
                # Dados completos por estado
                with st.expander("üìã Ver todos os estados"):
                    st.dataframe(dados_uf.sort_values('investimento_total', ascending=False), use_container_width=True)
        
        # An√°lise temporal
        if not df_ambulatorial.empty and 'ano_producao_ambulatorial' in df_ambulatorial.columns:
            st.header("üìÖ An√°lise Temporal")
            
            evolucao_anual = df_ambulatorial.groupby('ano_producao_ambulatorial').agg({
                'vl_total': 'sum',
                'qtd_total': 'sum'
            }).reset_index()
            
            col1, col2 = st.columns(2)
            
            with col1:
                fig_evol_invest = px.line(
                    evolucao_anual,
                    x='ano_producao_ambulatorial',
                    y='vl_total',
                    title='Evolu√ß√£o do Investimento em Sa√∫de',
                    labels={'vl_total': 'Investimento (R$)', 'ano_producao_ambulatorial': 'Ano'}
                )
                st.plotly_chart(fig_evol_invest, use_container_width=True)
            
            with col2:
                fig_evol_proc = px.line(
                    evolucao_anual,
                    x='ano_producao_ambulatorial',
                    y='qtd_total',
                    title='Evolu√ß√£o dos Procedimentos',
                    labels={'qtd_total': 'Procedimentos', 'ano_producao_ambulatorial': 'Ano'}
                )
                st.plotly_chart(fig_evol_proc, use_container_width=True)
        
        # Dados brutos para download
        st.header("üíæ Exportar Dados")
        
        if not df_ambulatorial.empty:
            csv_data = df_ambulatorial.to_csv(index=False)
            st.download_button(
                label="üì• Download Dados Ambulatoriais Completos",
                data=csv_data,
                file_name="dados_saude_brasil.csv",
                mime="text/csv",
                help="Baixe todos os dados de procedimentos ambulatoriais"
            )
        
        # Informa√ß√µes sobre os dados
        with st.expander("‚ÑπÔ∏è Sobre os Dados"):
            st.markdown("""
            **Fontes dos dados:**
            - üè• **SUS**: Procedimentos ambulatoriais (2020+)
            - üë• **IBGE**: Dados populacionais do Censo
            - üí∞ **PIB Municipal**: Dados econ√¥micos
            - üó∫Ô∏è **Munic√≠pios**: Informa√ß√µes geogr√°ficas
            
            **Limita√ß√µes:**
            - Dados carregados com limite para performance
            - Algumas tabelas podem ter colunas diferentes do esperado
            - Per√≠odo principal: 2020 em diante
            """)
    
    else:
        st.error("N√£o foi poss√≠vel conectar ao banco de dados")

if __name__ == "__main__":
    main()